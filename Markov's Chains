import matplotlib.pyplot as plt

import numpy as np

matrix = np.array([[0.4, 0.2, 0.4, 0, 0, 0, 0, 0],
                  [0.1, 0.6, 0.3, 0, 0, 0, 0, 0],
                  [0, 0, 0.2, 0.5, 0, 0.3, 0, 0],
                  [0, 0.3, 0, 0.3, 0.1, 0, 0.2, 0.1],
                  [0, 0, 0, 0, 0.8, 0, 0.2, 0],
                  [0, 0, 0.3, 0, 0, 0.4, 0.3, 0],
                  [0, 0, 0, 0.2, 0, 0.2, 0.6, 0],
                  [0, 0, 0, 0.4, 0, 0, 0, 0.6]])

print(matrix)

vector = np.array([1, 0, 0, 0, 0, 0, 0, 0])

choice_id = []
choice = []

power = 1
stop = 0
comparsion = np.array([[vector]])
rms = 0

vectors = []
while stop != 100:
    powered_matrix = np.linalg.matrix_power(matrix, power)
    print(f"POWER {power}:\n", powered_matrix)
    vector = vector.dot(powered_matrix)
    print("VECTOR:\n", vector)
    comparsion = np.append(comparsion, [[vector]], axis=0)
    print("Comparsion before:", comparsion)
    rms = np.std(comparsion)
    comparsion[0] = comparsion[1]
    comparsion = np.delete(comparsion, 0, axis=0)
    print("Comparsion after:", comparsion)
    print("RMS:\n", rms)
    print("\n", stop, "\n")
    power += 1
    stop += 1
    vectors.append(vector[0])

print(vectors)
hundred = list(range(1, 101))

plt.plot(vectors, hundred)
plt.show()

# Аналитическое решение
matrix = matrix.transpose()
matrix -= np.eye(8)
matrix[7] = np.ones(8)
result = np.linalg.solve(matrix, [0, 0, 0, 0, 0, 0, 0, 1])

print("\nAnalytics solution:", result)



